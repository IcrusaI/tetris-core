{"version":3,"sources":["webpack://TetrisCore/webpack/universalModuleDefinition","webpack://TetrisCore/webpack/bootstrap","webpack://TetrisCore/./src/CallbackTetris.ts","webpack://TetrisCore/./src/GameBoard.ts","webpack://TetrisCore/./src/Tetris.ts","webpack://TetrisCore/./src/Validator.ts","webpack://TetrisCore/./src/ValidatorConfig.ts","webpack://TetrisCore/./src/utils.tsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;;;;;;;AChFA;AAAA,+BAcC;AAbW,+CAAR,UAAwB,IAAxB,EAA8C;AAC1C,eAAO,MAAM,MAAN,CAAa,MAAb,CAAoB,UAAC,CAAD,EAAe;AAAK,qBAAE,IAAF;AAAe,SAAvD,CAAP;AACH,KAFO;AAID,mDAAP,UAA2B,QAA3B,EAAgD,QAAhD,EAAmE;AAChE,YAAM,SAAS,KAAK,eAAL,CAAqB,iBAAiB,MAAtC,CAAf;AAEC,aAAK,IAAI,WAAW,CAApB,EAAuB,WAAW,OAAO,MAAzC,EAAiD,UAAjD,EAA6D;AACzD,gBAAM,UAAqB,OAAO,QAAP,CAA3B;AAEA,oBAAM,QAAN,CAAe,QAAf,EAAyB,QAAzB;AACH;AACJ,KARM;AASX;AAAC,CAdD;;AAuBA,IAAY,gBAAZ;AAAA,WAAY,gBAAZ,EAA4B;AACxB;AACH,CAFD,EAAY,2EAAgB,EAAhB,CAAZ,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AAEA;AAAuC;AAInC,uBAAY,MAAZ,EAA0B;AAA1B,oBACI,qBAAO,IADX;AAHO,sBAAmB,EAAnB;AAKH,cAAK,MAAL,GAAc,MAAd;AAEA,cAAK,UAAL,CAAgB,OAAO,OAAvB;AAEA,cAAK,OAAL,CAAa,IAAI,KAAJ,CAAU,UAAU,aAApB,CAAb,EAAiD,EAAE,GAAG,CAAL,EAAQ,GAAG,CAAX,EAAjD;AAEA,oBAAY;AACR,kBAAK,mBAAL;AACH,SAFD,EAEG,IAFH;;AAGH;AAEO,8CAAR;AACI,YAAM,SAAuB,KAAK,OAAL,CAAa,UAAU,aAAvB,CAA7B;AAEA,YAAI,SAAS,IAAb;AACA,aAAK,IAAI,WAAW,CAApB,EAAuB,WAAW,OAAO,MAAzC,EAAiD,UAAjD,EAA6D;AACzD,gBAAM,QAAQ,OAAO,QAAP,CAAd;AAEA,gBAAI,KAAK,MAAL,CAAY,OAAZ,CAAoB,IAApB,IAA4B,MAAM,CAAN,GAAU,CAA1C,EAA6C;AACzC,yBAAS,KAAT;AACA;AACH;AAED,gBAAM,WAAW,KAAK,KAAL,CAAW,MAAM,CAAN,GAAU,CAArB,EAAwB,MAAM,CAA9B,CAAjB;AACA,gBAAI,SAAS,IAAT,KAAkB,UAAU,KAAhC,EAAuC;AACnC,yBAAS,KAAT;AACA;AACH;AACJ;AAED,aAAK,IAAI,WAAW,CAApB,EAAuB,WAAW,OAAO,MAAzC,EAAiD,UAAjD,EAA6D;AACzD,gBAAM,QAAQ,OAAO,QAAP,CAAd;AAEA,gBAAM,QAAe,KAAK,KAAL,CAAW,MAAM,CAAjB,EAAoB,MAAM,CAA1B,CAArB;AAEA,gBAAI,MAAJ,EAAY;AACR,qBAAK,OAAL,CAAa,KAAb,EAAoB,EAAE,GAAG,MAAM,CAAN,GAAU,CAAf,EAAkB,GAAG,MAAM,CAA3B,EAApB;AACA,qBAAK,SAAL,CAAe,KAAf;AACH,aAHD,MAGO;AACH,sBAAM,IAAN,GAAa,UAAU,KAAvB;AACA,qBAAK,OAAL,CAAa,KAAb,EAAoB,KAApB;AACH;AACJ;AAED,aAAK,mBAAL,CAAyB,KAAK,KAA9B,EAAqC,EAArC;AACH,KAlCO;AAoCA,kCAAR,UAAgB,IAAhB,EAA+B;AAC3B,YAAI,SAAuB,EAA3B;AAEA,aAAK,IAAI,MAAM,CAAf,EAAkB,MAAM,KAAK,KAAL,CAAW,MAAnC,EAA2C,KAA3C,EAAkD;AAC9C,iBAAK,IAAI,MAAM,CAAf,EAAkB,MAAM,KAAK,KAAL,CAAW,GAAX,EAAgB,MAAxC,EAAgD,KAAhD,EAAuD;AACnD,oBAAM,OAAO,KAAK,KAAL,CAAW,GAAX,EAAgB,GAAhB,CAAb;AAEA,oBAAI,SAAS,KAAK,IAAlB,EAAwB;AACpB,2BAAO,IAAP,CAAY;AACR,2BAAG,GADK;AAER,2BAAG;AAFK,qBAAZ;AAIH;AACJ;AACJ;AAED,eAAO,MAAP;AACH,KAjBO;AAmBA,kCAAR,UAAgB,IAAhB,EAA6B,KAA7B,EAA8C;AAC1C,aAAK,KAAL,CAAW,MAAM,CAAjB,EAAoB,MAAM,CAA1B,IAA+B,IAA/B;AACH,KAFO;AAIA,oCAAR,UAAkB,KAAlB,EAAmC;AAC/B,aAAK,OAAL,CAAa,IAAI,KAAJ,CAAU,UAAU,WAApB,CAAb,EAA+C,KAA/C;AACH,KAFO;AAIA,qCAAR,UAAmB,MAAnB,EAAwC;AACpC,aAAK,KAAL,CAAW,MAAX,CAAkB,CAAlB,EAAqB,KAAK,KAAL,CAAW,MAAhC;AAEA,aAAK,IAAI,SAAS,CAAlB,EAAqB,SAAS,OAAO,IAArC,EAA2C,QAA3C,EAAqD;AACjD,iBAAK,KAAL,CAAW,MAAX,IAAqB,EAArB;AAEA,iBAAK,IAAI,SAAS,CAAlB,EAAqB,SAAS,OAAO,IAArC,EAA2C,QAA3C,EAAqD;AACjD,qBAAK,SAAL,CAAe;AACX,uBAAG,MADQ;AAEX,uBAAG;AAFQ,iBAAf;AAIH;AACJ;AAED,aAAK,mBAAL,CAAyB,KAAK,KAA9B,EAAqC,EAArC;AACH,KAfO;AAgBZ;AAAC,CAhGD,CAAuC,wBAAvC;;AAkGA;AAGI,mBAAY,IAAZ,EAA2B;AACvB,aAAK,IAAL,GAAY,IAAZ;AACH;AACL;AAAC,CAND;AAAa;AAQb,IAAY,SAAZ;AAAA,WAAY,SAAZ,EAAqB;AACjB;AACA;AACA;AACH,CAJD,EAAY,sDAAS,EAAT,CAAZ,E;;;;;;;;;;;;;;;;;;;;AC5GA;AACA;AAGA;AAII,oBAAY,MAAZ,EAA2B;AACvB,YAAM,YAA6B,IAAI,yBAAJ,EAAnC;AAEA,aAAK,MAAL,GAAc,UAAU,QAAV,CAAmB,MAAnB,CAAd;AAEA,aAAK,SAAL,GAAiB,IAAI,mBAAJ,CAAc,KAAK,MAAnB,CAAjB;AACH;AAEM,0BAAP,UAAU,IAAV,EAAkC,QAAlC,EAAqE;AACjE,cAAM,MAAN,CAAa,IAAb,CAAkB;AACV,kBAAI,IADM;AAEV,sBAAQ;AAFE,SAAlB;AAIH,KALM;AAOP,0BAAI,gBAAJ,EAAI,OAAJ,EAAS;aAAT;AACI,mBAAO,KAAK,SAAL,CAAe,KAAtB;AACH,SAFQ;yBAAA;;AAAA,KAAT;AAGJ;AAAC,CAtBD;AAwBA,kBAAe,MAAf,C;;;;;;;;;;;;;;;;;;AC7BA;AAAA,0BAaC;AAZoB,yBAAjB,UAA0B,QAA1B,EAA0C;AACtC,eAAO,OAAO,QAAP,KAAoB,QAA3B;AACH,KAFgB;AAIA,wBAAjB,UAAyB,QAAzB,EAAwC;AACpC,eAAO,MAAM,OAAN,CAAc,QAAd,CAAP;AACH,KAFgB;AAKA,oBAAjB,UAAqB,QAArB,EAAuC,GAAvC,EAAkD;AAC9C,eAAO,MAAM,QAAb;AACH,KAFgB;AAGrB;AAAC,CAbD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AAEa,yBAAyB;AAClC,eAAW;AACP,gBAAQ,EADD;AAEP,gBAAQ,EAFD;AAGP,sBAAc;AACV,iBAAK,CADK;AAEV,iBAAK,CAAC;AAFI;AAHP,KADuB;AASlC,cAAU,CACN;AACI,gBAAQ,CACJ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADI;AADZ,KADM,EAMN;AACI,gBAAQ,CACJ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADI,EAEJ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFI;AADZ,KANM,EAYN;AACI,gBAAQ,CACJ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADI,EAEJ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFI;AADZ,KAZM,EAkBN;AACI,gBAAQ,CACJ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADI,EAEJ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFI;AADZ,KAlBM,EAwBN;AACI,gBAAQ,CACJ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADI,EAEJ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFI;AADZ,KAxBM,EA8BN;AACI,gBAAQ,CACJ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADI,EAEJ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFI;AADZ,KA9BM,EAoCN;AACI,gBAAQ,CACJ,CAAC,CAAD,EAAI,CAAJ,CADI,EAEJ,CAAC,CAAD,EAAI,CAAJ,CAFI;AADZ,KApCM;AATwB,CAAzB;AAsDb;AAA6C;AAA7C;;AAmGC;AAlGU,yCAAP,UAAgB,MAAhB,EAA+B;AAC3B,YAAI,WAAW,SAAf,EAA0B;AACtB,qBAAS,sBAAT;AACA,mBAAO,MAAP;AACH;AAED,wBAAgB,eAAhB,CAAgC,OAAO,OAAvC;AAEA,wBAAgB,cAAhB,CAA+B,OAAO,MAAtC;AAEA,eAAO,MAAP;AACH,KAXM;AAaQ,sCAAf,UAA+B,MAA/B,EAAqD;AACjD,YAAI,WAAW,SAAf,EAA0B;AACtB,mBAAO,uBAAe,OAAtB;AACH;AAED,YAAI,OAAO,IAAP,KAAgB,SAApB,EAA+B;AAC3B,mBAAO,IAAP,GAAc,uBAAe,OAAf,CAAuB,IAArC;AACH,SAFD,MAEO,IAAI,CAAC,KAAK,QAAL,CAAc,OAAO,IAArB,CAAD,IAA+B,CAAC,KAAK,GAAL,CAAS,OAAO,IAAhB,EAAsB,CAAtB,CAApC,EAA8D;AACjE,kBAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACH;AAED,YAAI,OAAO,IAAP,KAAgB,SAApB,EAA+B;AAC3B,mBAAO,IAAP,GAAc,uBAAe,OAAf,CAAuB,IAArC;AACH,SAFD,MAEO,IAAI,CAAC,KAAK,QAAL,CAAc,OAAO,IAArB,CAAD,IAA+B,CAAC,KAAK,GAAL,CAAS,OAAO,IAAhB,EAAsB,CAAtB,CAApC,EAA8D;AACjE,kBAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACH;AAED,YAAI,OAAO,UAAP,KAAsB,SAA1B,EAAqC;AACjC,mBAAO,UAAP,GAAoB,uBAAe,OAAf,CAAuB,UAA3C;AACH,SAFD,MAEO;AACH,iBAAK,aAAL,CAAmB,OAAO,UAA1B;AACH;AAED,eAAO,MAAP;AACH,KAxBc;AA0BA,oCAAf,UAA6B,MAA7B,EAAgD;AAC5C,YAAI,CAAC,KAAK,QAAL,CAAc,OAAO,CAArB,CAAL,EAA8B;AAC1B,kBAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACH;AAED,YAAI,CAAC,KAAK,QAAL,CAAc,OAAO,CAArB,CAAL,EAA8B;AAC1B,kBAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACH;AAED,eAAO,MAAP;AACH,KAVc;AAYA,qCAAf,UAA8B,MAA9B,EAAoD;AAChD,YAAI,WAAW,SAAf,EAA0B;AACtB,mBAAO,uBAAe,MAAtB;AACH;AAED,YAAI,OAAO,MAAP,KAAkB,CAAtB,EAAyB;AACrB,kBAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACH;AAED,aAAK,IAAM,QAAX,IAAuB,MAAvB,EAA+B;AAC3B,gBAAI,QAAqB,OAAO,QAAP,CAAzB;AAEA,oBAAQ,KAAK,aAAL,CAAmB,KAAnB,CAAR;AAEA,mBAAO,QAAP,IAAmB,KAAnB;AACH;AAED,eAAO,MAAP;AACH,KAlBc;AAoBA,oCAAf,UAA6B,KAA7B,EAA+C;AAC3C,YAAI,MAAM,IAAN,KAAe,SAAnB,EAA8B;AAC1B,kBAAM,IAAI,KAAJ,CAAU,8BAAV,CAAN;AACH;AAED,YAAI,CAAC,KAAK,OAAL,CAAa,MAAM,IAAnB,CAAL,EAA+B;AAC3B,kBAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN;AACH;AAED,aAAK,IAAM,QAAX,IAAuB,MAAM,IAA7B,EAAmC;AAC/B,gBAAM,OAAiB,MAAM,IAAN,CAAW,QAAX,CAAvB;AAEA,gBAAI,CAAC,KAAK,OAAL,CAAa,IAAb,CAAL,EAAyB;AACrB,sBAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN;AACH;AAED,iBAAK,IAAM,OAAX,IAAsB,IAAtB,EAA4B;AACxB,oBAAM,QAAgB,KAAK,OAAL,CAAtB;AAEA,oBAAI,CAAC,KAAK,QAAL,CAAc,KAAd,CAAD,IAAyB,UAAU,CAAnC,IAAwC,UAAU,CAAtD,EAAyD;AACrD,0BAAM,IAAI,KAAJ,CAAU,iCAAV,CAAN;AACH;AACJ;AACJ;AAED,eAAO,KAAP;AACH,KA1Bc;AA2BnB;AAAC,CAnGD,CAA6C,mBAA7C;;;;;;;;;;;;;;;;;;;ACvDW,iBAAwB,EAAxB,C","file":"tetris-core.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"TetrisCore\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TetrisCore\"] = factory();\n\telse\n\t\troot[\"TetrisCore\"] = factory();\n})((typeof global!==\"undefined\"?global:window), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/Tetris.ts\");\n","import {ICell} from \"~/GameBoard\";\r\n\r\nexport default class CallbackTetris {\r\n    private getEventsByType(type: EventTypesTetris) {\r\n        return utils.events.filter((e: EventTetris) => e.type === type);\r\n    }\r\n\r\n    public updateBoardCallback(newBoard: ICell[][], oldBoard: ICell[][]) {\r\n       const events = this.getEventsByType(EventTypesTetris.UPDATE);\r\n\r\n        for (let eventKey = 0; eventKey < events.length; eventKey++) {\r\n            const event: EventTetris = events[eventKey];\r\n\r\n            event.callback(newBoard, oldBoard);\r\n        }\r\n    }\r\n}\r\n\r\nexport type UpdateBoardCallbackTetris = (newBoard: ICell[][], oldBoard: ICell[][]) => any;\r\n\r\nexport interface EventTetris {\r\n    type: EventTypesTetris,\r\n    callback: UpdateBoardCallbackTetris\r\n}\r\n\r\nexport enum EventTypesTetris {\r\n    UPDATE = \"updateBoard\"\r\n}\r\n","import Config, {DisplayConfig} from \"~/Config\";\r\nimport CallbackTetris from \"~/CallbackTetris\";\r\n\r\nexport default class GameBoard extends CallbackTetris {\r\n    public board: ICell[][] = [];\r\n    private config: Config;\r\n\r\n    constructor(config: Config) {\r\n        super();\r\n        this.config = config;\r\n\r\n        this.clearBoard(config.display);\r\n\r\n        this.setCell(new ICell(CellTypes.FALLING_BLOCK), { x: 2, y: 0 });\r\n\r\n        setInterval(() => {\r\n            this.setFallingBlockDown()\r\n        }, 1000);\r\n    }\r\n\r\n    private setFallingBlockDown() {\r\n        const points: PointBoard[] = this.getCell(CellTypes.FALLING_BLOCK);\r\n\r\n        let isDown = true;\r\n        for (let pointKey = 0; pointKey < points.length; pointKey++) {\r\n            const point = points[pointKey];\r\n\r\n            if (this.config.display.rows <= point.y + 1) {\r\n                isDown = false;\r\n                continue;\r\n            }\r\n\r\n            const cellDown = this.board[point.y + 1][point.x];\r\n            if (cellDown.type === CellTypes.BLOCK) {\r\n                isDown = false;\r\n                continue;\r\n            }\r\n        }\r\n\r\n        for (let pointKey = 0; pointKey < points.length; pointKey++) {\r\n            const point = points[pointKey];\r\n\r\n            const block: ICell = this.board[point.y][point.x];\r\n\r\n            if (isDown) {\r\n                this.setCell(block, { y: point.y + 1, x: point.x });\r\n                this.resetCell(point);\r\n            } else {\r\n                block.type = CellTypes.BLOCK;\r\n                this.setCell(block, point);\r\n            }\r\n        }\r\n\r\n        this.updateBoardCallback(this.board, []);\r\n    }\r\n\r\n    private getCell(type: CellTypes): PointBoard[] {\r\n        let points: PointBoard[] = [];\r\n\r\n        for (let row = 0; row < this.board.length; row++) {\r\n            for (let col = 0; col < this.board[row].length; col++) {\r\n                const cell = this.board[row][col];\r\n\r\n                if (type === cell.type) {\r\n                    points.push({\r\n                        y: row,\r\n                        x: col\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        return points;\r\n    }\r\n\r\n    private setCell(cell: ICell, point: PointBoard) {\r\n        this.board[point.y][point.x] = cell;\r\n    }\r\n\r\n    private resetCell(point: PointBoard) {\r\n        this.setCell(new ICell(CellTypes.EMPTY_BLOCK), point);\r\n    }\r\n\r\n    private clearBoard(config: DisplayConfig) {\r\n        this.board.splice(0, this.board.length);\r\n\r\n        for (let rowKey = 0; rowKey < config.rows; rowKey++) {\r\n            this.board[rowKey] = [];\r\n\r\n            for (let colKey = 0; colKey < config.cols; colKey++) {\r\n                this.resetCell({\r\n                    y: rowKey,\r\n                    x: colKey\r\n                });\r\n            }\r\n        }\r\n\r\n        this.updateBoardCallback(this.board, []);\r\n    }\r\n}\r\n\r\nexport class ICell {\r\n    public type: CellTypes;\r\n\r\n    constructor(type: CellTypes) {\r\n        this.type = type;\r\n    }\r\n}\r\n\r\nexport enum CellTypes {\r\n    BLOCK = \"block\",\r\n    EMPTY_BLOCK = \"emptyBlock\",\r\n    FALLING_BLOCK = \"fallingBlock\"\r\n}\r\n\r\nexport interface PointBoard {\r\n    x: number,\r\n    y: number\r\n}\r\n","import Config from \"~/Config\";\r\nimport ValidatorConfig from \"~/ValidatorConfig\";\r\nimport GameBoard, {ICell} from \"~/GameBoard\";\r\nimport {EventTypesTetris, UpdateBoardCallbackTetris} from \"~/CallbackTetris\";\r\n\r\nclass Tetris {\r\n    private readonly config: Config;\r\n    private gameBoard: GameBoard;\r\n\r\n    constructor(config?: Config) {\r\n        const validator: ValidatorConfig = new ValidatorConfig();\r\n\r\n        this.config = validator.validate(config);\r\n\r\n        this.gameBoard = new GameBoard(this.config);\r\n    }\r\n\r\n    public on(type: EventTypesTetris, callback: UpdateBoardCallbackTetris): void {\r\n        utils.events.push({\r\n                type,\r\n                callback\r\n            });\r\n    }\r\n\r\n    get board(): ICell[][] {\r\n        return this.gameBoard.board;\r\n    }\r\n}\r\n\r\nexport default Tetris;\r\n","export default class Validator {\r\n    protected static isNumber(variable: number): boolean {\r\n        return typeof variable === \"number\";\r\n    }\r\n\r\n    protected static isArray(variable: any[]): boolean {\r\n        return Array.isArray(variable);\r\n    }\r\n\r\n\r\n    protected static min(variable: number, min: number): boolean {\r\n        return min > variable;\r\n    }\r\n}\r\n","import Config, {BlockConfig, DisplayConfig, PointConfig} from \"~/Config\";\r\nimport Validator from \"~/Validator\";\r\n\r\nexport const DEFAULT_CONFIG: Config = {\r\n    \"display\": {\r\n        \"rows\": 20,\r\n        \"cols\": 10,\r\n        \"startPoint\": {\r\n            \"x\": 4,\r\n            \"y\": -1\r\n        }\r\n    },\r\n    \"blocks\": [\r\n        {\r\n            \"type\": [\r\n                [1, 1, 1, 1]\r\n            ]\r\n        },\r\n        {\r\n            \"type\": [\r\n                [0, 1, 0],\r\n                [1, 1, 1]\r\n            ]\r\n        },\r\n        {\r\n            \"type\": [\r\n                [1, 0, 0],\r\n                [1, 1, 1]\r\n            ]\r\n        },\r\n        {\r\n            \"type\": [\r\n                [0, 0, 1],\r\n                [1, 1, 1]\r\n            ]\r\n        },\r\n        {\r\n            \"type\": [\r\n                [1, 1, 0],\r\n                [0, 1, 1]\r\n            ]\r\n        },\r\n        {\r\n            \"type\": [\r\n                [0, 1, 1],\r\n                [1, 1, 0]\r\n            ]\r\n        },\r\n        {\r\n            \"type\": [\r\n                [1, 1],\r\n                [1, 1]\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nexport default class ValidatorConfig extends Validator {\r\n    public validate(config?: Config): Config {\r\n        if (config === undefined) {\r\n            config = DEFAULT_CONFIG;\r\n            return config;\r\n        }\r\n\r\n        ValidatorConfig.validateDisplay(config.display);\r\n\r\n        ValidatorConfig.validateBlocks(config.blocks);\r\n\r\n        return config;\r\n    }\r\n\r\n    private static validateDisplay(config?: DisplayConfig): DisplayConfig {\r\n        if (config === undefined) {\r\n            return DEFAULT_CONFIG.display;\r\n        }\r\n\r\n        if (config.cols === undefined) {\r\n            config.cols = DEFAULT_CONFIG.display.cols;\r\n        } else if (!this.isNumber(config.cols) || !this.min(config.cols, 0)) {\r\n            throw new Error(\"The variable is not a number, or it is less than 1.\");\r\n        }\r\n\r\n        if (config.rows === undefined) {\r\n            config.rows = DEFAULT_CONFIG.display.rows;\r\n        } else if (!this.isNumber(config.rows) || !this.min(config.rows, 0)) {\r\n            throw new Error(\"The variable is not a number, or it is less than 1.\");\r\n        }\r\n\r\n        if (config.startPoint === undefined) {\r\n            config.startPoint = DEFAULT_CONFIG.display.startPoint;\r\n        } else {\r\n            this.validatePoint(config.startPoint);\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    private static validatePoint(config: PointConfig): PointConfig {\r\n        if (!this.isNumber(config.x)) {\r\n            throw new Error(\"The point must have an x-axis\");\r\n        }\r\n\r\n        if (!this.isNumber(config.y)) {\r\n            throw new Error(\"The point must have an y-axis\");\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    private static validateBlocks(blocks?: BlockConfig[]): BlockConfig[] {\r\n        if (blocks === undefined) {\r\n            return DEFAULT_CONFIG.blocks;\r\n        }\r\n\r\n        if (blocks.length === 0) {\r\n            throw new Error(\"There must be at least 1 block\");\r\n        }\r\n\r\n        for (const blockKey in blocks) {\r\n            let block: BlockConfig = blocks[blockKey];\r\n\r\n            block = this.validateBlock(block);\r\n\r\n            blocks[blockKey] = block;\r\n        }\r\n\r\n        return blocks;\r\n    }\r\n\r\n    private static validateBlock(block: BlockConfig): BlockConfig {\r\n        if (block.type === undefined) {\r\n            throw new Error(\"The block must have the type\");\r\n        }\r\n\r\n        if (!this.isArray(block.type)) {\r\n            throw new Error(\"The type must be an array\");\r\n        }\r\n\r\n        for (const blockKey in block.type) {\r\n            const type: number[] = block.type[blockKey];\r\n\r\n            if (!this.isArray(type)) {\r\n                throw new Error(\"The type must be an array\");\r\n            }\r\n\r\n            for (const typeKey in type) {\r\n                const state: number = type[typeKey];\r\n\r\n                if (!this.isNumber(state) && state !== 1 && state !== 0) {\r\n                    throw new Error(\"The state must be either 1 or 0\");\r\n                }\r\n            }\r\n        }\r\n\r\n        return block;\r\n    }\r\n}\r\n","import {EventTetris} from \"~/CallbackTetris\";\r\n\r\nexport let events: EventTetris[] = [];\r\n\r\n"],"sourceRoot":""}